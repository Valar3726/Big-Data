1)
db.createCollection("test")
var docs = [{
    "_id" : 1,
    "name" : {
        "first" : "John",
        "last" : "Backus"
    },
    "birth" : ISODate("1924-12-03T05:00:00Z"),
    "death" : ISODate("2007-03-17T04:00:00Z"),
    "contribs" : [
        "Fortran",
        "ALGOL",
        "Backus-Naur Form",
        "FP"
    ],
    "awards" : [
        {
            "award" : "W.W. McDowell Award",
            "year" : 1967,
            "by" : "IEEE Computer Society"
        },
        {
            "award" : "National Medal of Science",
            "year" : 1975,
            "by" : "National Science Foundation"
        },
        {
            "award" : "Turing Award",
            "year" : 1977,
            "by" : "ACM"
        },
        {
            "award" : "Draper Prize",
            "year" : 1993,
            "by" : "National Academy of Engineering"
        }
    ]
},
{
    "_id" : ObjectId("51df07b094c6acd67e492f41"),
    "name" : {
        "first" : "John",
        "last" : "McCarthy"
    },
    "birth" : ISODate("1927-09-04T04:00:00Z"),
    "death" : ISODate("2011-12-24T05:00:00Z"),
    "contribs" : [
        "Lisp",
        "Artificial Intelligence",
        "ALGOL"
    ],
    "awards" : [
        {
            "award" : "Turing Award",
            "year" : 1971,
            "by" : "ACM"
        },
        {
            "award" : "Kyoto Prize",
            "year" : 1988,
            "by" : "Inamori Foundation"
        },
        {
            "award" : "National Medal of Science",
            "year" : 1990,
            "by" : "National Science Foundation"
        }
    ]
},
{
    "_id" : 3,
    "name" : {
        "first" : "Grace",
        "last" : "Hopper"
    },
    "title" : "Rear Admiral",
    "birth" : ISODate("1906-12-09T05:00:00Z"),
    "death" : ISODate("1992-01-01T05:00:00Z"),
    "contribs" : [
        "UNIVAC",
        "compiler",
        "FLOW-MATIC",
        "COBOL"
    ],
    "awards" : [
        {
            "award" : "Computer Sciences Man of the Year",
            "year" : 1969,
            "by" : "Data Processing Management Association"
        },
        {
            "award" : "Distinguished Fellow",
            "year" : 1973,
            "by" : " British Computer Society"
        },
        {
            "award" : "W. W. McDowell Award",
            "year" : 1976,
            "by" : "IEEE Computer Society"
        },
        {
            "award" : "National Medal of Technology",
            "year" : 1991,
            "by" : "United States"
        }
    ]
}],
{
    "_id" : 4,
    "name" : {
        "first" : "Kristen",
        "last" : "Nygaard"
    },
    "birth" : ISODate("1926-08-27T04:00:00Z"),
    "death" : ISODate("2002-08-10T04:00:00Z"),
    "contribs" : [
        "OOP",
        "Simula"
    ],
    "awards" : [
        {
            "award" : "Rosing Prize",
            "year" : 1999,
            "by" : "Norwegian Data Association"
        },
        {
            "award" : "Turing Award",
            "year" : 2001,
            "by" : "ACM"
        },
        {
            "award" : "IEEE John von Neumann Medal",
            "year" : 2001,
            "by" : "IEEE"
        }
    ]
},
{
    "_id" : 5,
    "name" : {
        "first" : "Ole-Johan",
        "last" : "Dahl"
    },
    "birth" : ISODate("1931-10-12T04:00:00Z"),
    "death" : ISODate("2002-06-29T04:00:00Z"),
    "contribs" : [
        "OOP",
        "Simula"
    ],
    "awards" : [
        {
            "award" : "Rosing Prize",
            "year" : 1999,
            "by" : "Norwegian Data Association"
        },
        {
            "award" : "Turing Award",
            "year" : 2001,
            "by" : "ACM"
        },
        {
            "award" : "IEEE John von Neumann Medal",
            "year" : 2001,
            "by" : "IEEE"
        }
    ]
},
{
    "_id" : 6,
    "name" : {
        "first" : "Guido",
        "last" : "van Rossum"
    },
    "birth" : ISODate("1956-01-31T05:00:00Z"),
    "contribs" : [
        "Python"
    ],
    "awards" : [
        {
            "award" : "Award for the Advancement of Free Software",
            "year" : 2001,
            "by" : "Free Software Foundation"
        },
        {
            "award" : "NLUUG Award",
            "year" : 2003,
            "by" : "NLUUG"
        }
    ]
},
{
    "_id" : ObjectId("51e062189c6ae665454e301d"),
    "name" : {
        "first" : "Dennis",
        "last" : "Ritchie"
    },
    "birth" : ISODate("1941-09-09T04:00:00Z"),
    "death" : ISODate("2011-10-12T04:00:00Z"),
    "contribs" : [
        "UNIX",
        "C"
    ],
    "awards" : [
        {
            "award" : "Turing Award",
            "year" : 1983,
            "by" : "ACM"
        },
        {
            "award" : "National Medal of Technology",
            "year" : 1998,
            "by" : "United States"
        },
        {
            "award" : "Japan Prize",
            "year" : 2011,
            "by" : "The Japan Prize Foundation"
        }
    ]
},
{
    "_id" : 8,
    "name" : {
        "first" : "Yukihiro",
        "aka" : "Matz",
        "last" : "Matsumoto"
    },
    "birth" : ISODate("1965-04-14T04:00:00Z"),
    "contribs" : [
        "Ruby"
    ],
    "awards" : [
        {
            "award" : "Award for the Advancement of Free Software",
            "year" : "2011",
            "by" : "Free Software Foundation"
        }
    ]
},
{
    "_id" : 9,
    "name" : {
        "first" : "James",
        "last" : "Gosling"
    },
    "birth" : ISODate("1955-05-19T04:00:00Z"),
    "contribs" : [
        "Java"
    ],
    "awards" : [
        {
            "award" : "The Economist Innovation Award",
            "year" : 2002,
            "by" : "The Economist"
        },
        {
            "award" : "Officer of the Order of Canada",
            "year" : 2007,
            "by" : "Canada"
        }
    ]
},
{
    "_id" : 10,
    "name" : {
        "first" : "Martin",
        "last" : "Odersky"
    },
    "contribs" : [
        "Scala"
    ]
}]

docs.forEach(function(x){db.test.insert(x)})

2)
var doc = db.test.findOne({"name" : {first: "John", last:"McCarthy"}});
doc._id = 2;
db.test.remove({"name" : {first: "John", last:"McCarthy"}}, true);
db.test.insert(doc);

3)
db.test.insert({
"_id" : 20,
"name" : {
"first" : "Alex",
"last" : "Chen"
},
"birth" : ISODate("1933-08-27T04:00:00Z"),
"death" : ISODate("1984-11-07T04:00:00Z"),
"contribs" : [
"C++",
"Simula"
],
"awards" : [
{
"award" : "WPI Award",
"year" : 1977,
"by" : "WPI"
}
]
})

db.test.insert({
"_id" : 30,
"name" : {
"first" : "David",
"last" : "Mark"
},
"birth" : ISODate("1911-04-12T04:00:00Z"),
"death" : ISODate("2000-11-07T04:00:00Z"),
"contribs" : [
"C++",
"FP",
"Lisp",
],
"awards" : [
{
"award" : "WPI Award",
"year" : 1963,
"by" : "WPI"
},
{
"award" : "Turing Award",
"year" : 1966,
"by" : "ACM"
}
]
})

4)
db.test.find({"awards.award" : "Turing Award", "awards.year": {$gt: 1976}})

5)
db.test.find({$or: [{"contribs": "FP"}, {"awards": {$exists:true}, $where:"this.awards.length < 3"}]})

6)
db.test.findOne({"name": {"first": "Dennis", "last": "Ritchie"}}, {"_id":0, "name":1, "contribs":1})

7)
db.test.update({"name": {"first": "Guido", "last": "van Rossum"}}, {$addToSet: {"contribs": "OOP"}})

8)
var comments = ["He taught in 3 universities", "died from cancer", "lived in CA"]
db.test.update({"name": {"first": "Alex", "last": "Chen"}}, {$set: {"comments": comments}})


9)
# Get array of contributions by alex chen var alexchen = db.test.findOne({"name": {"first": "Alex", "last": "Chen"}}).contribs# Map: {Contribution, name} -> Reduce: {“People”: aggregated values} document
# Save to new collection “mapreduce”db.test.mapReduce(	function() { 		for(var idx = 0; idx < this.contribs.length; idx++){			emit(this.contribs[idx], this.name);		}	},	function(key, values) {		return {"People": values};			}, {out: "mapreduce"})# “People": [names] is nested under “value”. Make “People” the first leveldb.mapreduce.find({"value.People": {$exists: true}}).forEach(function(item) {    db.mapreduce.update({_id: item._id}, item.value);});# Unique key,value are not sent to reducer, need to create “People” property for thosedb.mapreduce.find({"value": {$exists: true}}).forEach(function(item) {    db.mapreduce.update({_id: item._id}, {"People": [item.value]});});# Add “Contribution” fielddb.mapreduce.find().forEach(function(item) {    db.mapreduce.update({_id: item._id}, {$set: {"Contribution": item._id}});});# Query contributions by alex chendb.mapreduce.find( {_id: {$in: alexchen}}, {_id:0, "Contribution":1, "People":1})

10)
db.test.find({"name.first" : {$regex:"^Jo.*"}}).sort({"name.last": 1})
11
db.test.distinct("awards.by")
12
db.test.update({},{$unset:{death: true}},false,true)
13
db.test.update({},{$pull:{awards:{year: 2011}}},false,true)
14
db.test.update({_id:30,"awards.by":"WPI"},{$set:{"awards.$.year":1965}})
15
var data = db.test.findOne({_id:3}).contribs
db.test.update({_id:30},{$addToSet:{contribs: {$each:data}}})
16
db.test.aggregate([
{$project:{_id:0, name:1, count:{$sum:{$map:{input:"$awards", as:"a", in:{$cond:[{$eq:["$$a.year",2001]},1,0]}}}}}},
{$match:{count:{$gte:2}}},
{$project:{name:1}}
])
17
db.test.find().sort({_id:-1}).limit(1)
18
db.test.find({"awards.by":"ACM"}).limit(1)
19
db.test.remove({$or:[{_id:20},{_id:30}]},{multi: true})
20
db.test.count()
